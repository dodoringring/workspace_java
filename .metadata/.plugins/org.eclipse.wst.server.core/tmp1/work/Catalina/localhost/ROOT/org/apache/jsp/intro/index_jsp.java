/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.70
 * Generated at: 2023-02-17 08:47:33 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.intro;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/intro/../common/easyUI_common.jsp", Long.valueOf(1676345271053L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

 String smem_id=(String)session.getAttribute("smem_id");
String smem_name=(String)session.getAttribute("smem_name");
out.print("세션에서 꺼내온 값===>"+smem_id+" , "+smem_name);

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <title>Web Application</title>\r\n");
      out.write("	");

	StringBuilder path=new StringBuilder(request.getContextPath());//ë¬¼ë¦¬ì ì¸ ìì¹ë¥¼ ì°¾ìì£¼ëì ë¤.
	path.append("/");

      out.write("\r\n");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(path.toString() );
      out.write("themes/default/easyui.css\"/>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(path.toString() );
      out.write("themes/icon.css\" />\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"");
      out.print(path.toString() );
      out.write("demo/demo.css\" />\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(path.toString() );
      out.write("js/jquery.min.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(path.toString() );
      out.write("js/jquery.easyui.min.js\"></script>\r\n");
      out.write("\r\n");
      out.write("	<style type=\"text/css\">\r\n");
      out.write("	a{\r\n");
      out.write("	text-decoration:none;\r\n");
      out.write("	}\r\n");
      out.write("	</style>\r\n");
      out.write("	<script>\r\n");
      out.write("	const login=()=>{\r\n");
      out.write("		/*\r\n");
      out.write("		select mem_name from book_member\r\n");
      out.write("	    where mem_id=:id\r\n");
      out.write("	    and mem_pw=:pw\r\n");
      out.write("	    */\r\n");
      out.write("	    //사용자가 입력한 아이디 가져오기\r\n");
      out.write("	    const user_id=$(\"#_easyui_textbox_input1\").val();\r\n");
      out.write("	    //사용자가 입력한 비번 가져오기\r\n");
      out.write("	    const user_pw=$(\"#_easyui_textbox_input2\").val();\r\n");
      out.write("	    alert(user_id+user_pw);\r\n");
      out.write("	    //\r\n");
      out.write("	}\r\n");
      out.write("	</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <h2>[[웹 어플리케이션 실습]]</h2>\r\n");
      out.write("    <div style=\"margin:20px 0;\"></div>\r\n");
      out.write("    <div class=\"easyui-layout\" style=\"width:1000px;height:550px;\">\r\n");
      out.write("        <div id=\"p\" data-options=\"region:'west'\" title=\"kh정보교육원\" style=\"width:30%;padding:10px\">\r\n");
      out.write("<!-- ===========[[로그인 화면]]====================-->\r\n");
      out.write("<div id=\"d_login\" align=\"center\"></div>\r\n");
      out.write("<input id=\"tb_id\" type=\"text\" style=\"width:170px\">\r\n");
      out.write("<script>\r\n");
      out.write("$('#tb_id').textbox({\r\n");
      out.write("    iconCls:'icon-man',\r\n");
      out.write("    iconAlign:'right',\r\n");
      out.write("    prompt:'아이디'\r\n");
      out.write("})</script>\r\n");
      out.write("<div style=\"margin:3px 0;\"></div>\r\n");
      out.write("<input id=\"pb_pw\" type=\"text\" style=\"width:170px\">\r\n");
      out.write("<script>\r\n");
      out.write("    $('#pb_pw').passwordbox({\r\n");
      out.write("        prompt: 'Password',\r\n");
      out.write("        showEye: true\r\n");
      out.write("    });\r\n");
      out.write("</script>\r\n");
      out.write("<div style=\"margin:3px 0;\"></div>\r\n");
      out.write("<a id=\"btn_login\" href=\"javascript:login()\">로그인</a>\r\n");
      out.write("<script>\r\n");
      out.write("$('#btn_login').linkbutton({\r\n");
      out.write("    iconCls: 'icon-search'\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<a id=\"btn_member\" href=\"javascript:memeberShip()\">회원가입</a>\r\n");
      out.write("<script>\r\n");
      out.write("$('#btn_member').linkbutton({\r\n");
      out.write("    iconCls: 'icon-search'\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("<!-- ===========[[로그아웃 화면]]====================-->\r\n");
      out.write("<div id=\"d_logout\" align=\"center\"></div>\r\n");
      out.write("<!-- 메뉴구성[로그인 화면과 트리메뉴] -->\r\n");
      out.write("	<div style=\"margin:3px 0;\"></div>\r\n");
      out.write("		<ul id=\"tre_gym\" class=\"easyui-tree\">\r\n");
      out.write("		    <li data-options=\"state:'closed'\">\r\n");
      out.write("		        <span>회원관리</span>\r\n");
      out.write("		        <ul>\r\n");
      out.write("		            <li><a href=\"#\">회원목록</a></li>\r\n");
      out.write("		            <li><a href=\"#\">회원등록</a></li>\r\n");
      out.write("		            <li><a href=\"#\">회원삭제</a></li>\r\n");
      out.write("		        </ul>\r\n");
      out.write("		    </li>\r\n");
      out.write("		</ul>\r\n");
      out.write("</div>\r\n");
      out.write("<!-- 메인화면 [게시판,온라인시험,회원관리(회원목록,회원등록,회원삭제),우편번호 검색기 ]-->\r\n");
      out.write("        <div data-options=\"region:'center'\" title=\"Center\">\r\n");
      out.write("        \r\n");
      out.write("        </div>\r\n");
      out.write("    </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("<!-- \r\n");
      out.write("부트스트랩\r\n");
      out.write("반응형지원, CSS라이브러리 사용\r\n");
      out.write("jEasyUI\r\n");
      out.write("이벤트 처리(jquery-레거시 시스템)\r\n");
      out.write("자바스크립트-표준은 아님\r\n");
      out.write(" -->");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
